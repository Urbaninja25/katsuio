import Head from "next/head";
import { useState } from "react";
import { useUser, SignInButton, UserButton } from "@clerk/nextjs";
import { Button } from "@nextui-org/react";
import { Input } from "@nextui-org/react";
import { type NextPage } from "next";

import { api } from "~/utils/api";

import {
  callChatGPTWithFunctions,
  callChatGPTWithAssistance,
} from "~/server/helper/openai";

import { PageLayout } from "~/componenets/layout";
import { LoadingPage, LoadingSpinner } from "~/componenets/loading";

const CreateRequestPostWizard = () => {
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [data, setData] = useState(null);
  return (
    <div className="flex w-full flex-nowrap gap-4 md:flex-nowrap">
      <Input
        type="text"
        label=" find your unique experiancies"
        placeholder="ðŸ§™ hey katsuio,what can i expore today?"
        disabled={isLoading}
        value={input}
        onChange={(e) => setInput(e.target.value)}
        onKeyDown={async (e) => {
          if (e.key === "Enter") {
            setIsLoading(true);
            e.preventDefault();
            if (input !== "") {
              const fetchedData = await callChatGPTWithAssistance(input);
              setData(fetchedData); // Set the retrieved data in the state
            }
            setInput("");
            setIsLoading(false);
          }
        }}
      />

      {input !== "" && (
        <div>
          <Button
            isLoading={isLoading}
            size="sm"
            color="secondary"
            variant="shadow"
            onClick={async () => {
              try {
                setIsLoading(true);

                const fetchedData = await callChatGPTWithAssistance(input);
                setData(fetchedData); // Set the retrieved data in the state
              } catch {
                console.error("Error fetching data:", Error);
              } finally {
                setIsLoading(false); // Ensure isLoading is set to false after operation completes
                setInput("");
              }
            }}
          >
            Post
          </Button>
        </div>
      )}
      {data && !isLoading && <CreateResponsePostWizard data={data} />}
    </div>
  );
};

const CreateResponsePostWizard = ({ data }) => {
  return (
    <div className="mt-4">
      <div className="rounded-lg bg-gray-200 p-4">
        <p className="text-sm text-gray-700">{data}</p>
        <button className=" focus:shadow-outline mt-6 h-10 rounded-lg bg-purple-600 px-5 text-violet-200 transition-colors duration-150 hover:bg-gray-800">
          order
        </button>
      </div>
    </div>
  );
};

const Home: NextPage = () => {
  const { isLoaded: userLoaded, isSignedIn } = useUser();

  if (!userLoaded) return <div />;
  return (
    <PageLayout>
      <Head>
        <title>Create your unique experiancies</title>

        <meta name="description" content="Generated by create-t3-app" />

        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex justify-center gap-4 bg-gray-100 p-4">
        <div className="  mx-auto max-w-md flex-auto   p-2 ">
          <Button color="secondary" radius="full" variant="shadow">
            your activities!
          </Button>
        </div>
        {isSignedIn && <CreateRequestPostWizard />}

        {isSignedIn && <UserButton afterSignOutUrl="/" />}
      </main>
    </PageLayout>
  );
};

export default Home;

// {!isSignedIn && (
//   <div className="flex justify-center">
//     <SignInButton className="focus:shadow-outline h-10 rounded-lg bg-purple-600 px-5 text-violet-200 transition-colors duration-150 hover:bg-gray-800" />
//   </div>
// )}
