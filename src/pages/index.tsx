import Head from "next/head";
import { useState } from "react";

import { type NextPage } from "next";

import { api } from "~/utils/api";

import {
  callChatGPTWithFunctions,
  callChatGPTWithAssistance,
} from "~/server/helper/openai";

import { PageLayout } from "~/componenets/layout";
import { LoadingPage, LoadingSpinner } from "~/componenets/loading";

// dotenv.config({ path: "./config.env" });

console.log(process.env.NEXT_PUBLIC_OPEN_AI_API_KEY);

const CreateRequestWizard = () => {
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [data, setData] = useState(null); // State to hold the retrieved data

  return (
    <div className="flex w-full  gap-3 ">
      <input
        placeholder="Type something!"
        className="mb-2 grow bg-transparent text-lg font-semibold outline-none"
        type="text"
        value={input}
        onChange={(e) => setInput(e.target.value)}
        onKeyDown={async (e) => {
          if (e.key === "Enter") {
            setIsLoading(true);
            e.preventDefault();
            if (input !== "") {
              const fetchedData = await callChatGPTWithAssistance(input);
              setData(fetchedData); // Set the retrieved data in the state
            }

            setIsLoading(false);
          }
        }}
        disabled={isLoading}
      />

      {input !== "" && !isLoading && (
        <button
          className="focus:shadow-outline m-2 mr-10 h-10 rounded-lg bg-gray-700 px-5 text-gray-100 transition-colors duration-150 hover:bg-gray-800"
          onClick={async () => {
            setIsLoading(true);
            const fetchedData = await callChatGPTWithAssistance(input);
            setData(fetchedData); // Set the retrieved data in the state
            setIsLoading(false);
          }}
        >
          post
        </button>
      )}

      {isLoading && (
        <div className="mr-10 flex items-center justify-center">
          <LoadingSpinner size={20} />
        </div>
      )}

      {/* Display data if available */}
      {data && !isLoading && (
        <div className="mt-4">
          <p>Data: {data}</p>
        </div>
      )}
    </div>
  );
};

const Home: NextPage = () => {
  return (
    <PageLayout>
      <Head>
        <title>Create your unique experiancies</title>

        <meta name="description" content="Generated by create-t3-app" />

        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="bg-gray-100 p-4">
        <div className="mx-auto max-w-md">
          <h1 className="mb-2 text-lg font-semibold">Ask a Question</h1>

          <CreateRequestWizard />

          <div className="rounded-md border border-gray-300 bg-white p-4 shadow-md">
            <h2 className="mb-2 text-lg font-semibold">Response</h2>
            <div id="responseDisplay" className="text-gray-600"></div>
          </div>
        </div>
      </main>
    </PageLayout>
  );
};

export default Home;
